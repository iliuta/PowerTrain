// Mocks generated by Mockito 5.4.6 from annotations
// in ftms/test/features/training/training_session_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:io' as _i14;
import 'dart:typed_data' as _i10;

import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i8;
import 'package:flutter_blue_plus_platform_interface/flutter_blue_plus_platform_interface.dart'
    as _i2;
import 'package:flutter_ftms/flutter_ftms.dart' as _i3;
import 'package:ftms/core/models/live_data_field_value.dart' as _i13;
import 'package:ftms/core/services/fit/training_data_recorder.dart' as _i12;
import 'package:ftms/core/services/ftms_service.dart' as _i11;
import 'package:ftms/core/services/strava/strava_activity_uploader.dart' as _i6;
import 'package:ftms/core/services/strava/strava_oauth_handler.dart' as _i5;
import 'package:ftms/core/services/strava/strava_token_manager.dart' as _i4;
import 'package:ftms/core/services/strava_service.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceIdentifier_0 extends _i1.SmartFake
    implements _i2.DeviceIdentifier {
  _FakeDeviceIdentifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothDevice_1 extends _i1.SmartFake
    implements _i3.BluetoothDevice {
  _FakeBluetoothDevice_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStravaTokenManager_2 extends _i1.SmartFake
    implements _i4.StravaTokenManager {
  _FakeStravaTokenManager_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStravaOAuthHandler_3 extends _i1.SmartFake
    implements _i5.StravaOAuthHandler {
  _FakeStravaOAuthHandler_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStravaActivityUploader_4 extends _i1.SmartFake
    implements _i6.StravaActivityUploader {
  _FakeStravaActivityUploader_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i3.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceIdentifier get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  String get advName => (super.noSuchMethod(
        Invocation.getter(#advName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
      ) as String);

  @override
  List<_i8.BluetoothService> get servicesList => (super.noSuchMethod(
        Invocation.getter(#servicesList),
        returnValue: <_i8.BluetoothService>[],
      ) as List<_i8.BluetoothService>);

  @override
  bool get isAutoConnectEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoConnectEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<_i3.BluetoothConnectionState> get connectionState =>
      (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i9.Stream<_i3.BluetoothConnectionState>.empty(),
      ) as _i9.Stream<_i3.BluetoothConnectionState>);

  @override
  int get mtuNow => (super.noSuchMethod(
        Invocation.getter(#mtuNow),
        returnValue: 0,
      ) as int);

  @override
  _i9.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i9.Stream<int>.empty(),
      ) as _i9.Stream<int>);

  @override
  _i9.Stream<void> get onServicesReset => (super.noSuchMethod(
        Invocation.getter(#onServicesReset),
        returnValue: _i9.Stream<void>.empty(),
      ) as _i9.Stream<void>);

  @override
  _i9.Stream<_i8.BluetoothBondState> get bondState => (super.noSuchMethod(
        Invocation.getter(#bondState),
        returnValue: _i9.Stream<_i8.BluetoothBondState>.empty(),
      ) as _i9.Stream<_i8.BluetoothBondState>);

  @override
  _i9.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i9.Stream<bool>.empty(),
      ) as _i9.Stream<bool>);

  @override
  _i2.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i9.Stream<_i3.BluetoothConnectionState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.Stream<_i3.BluetoothConnectionState>.empty(),
      ) as _i9.Stream<_i3.BluetoothConnectionState>);

  @override
  _i9.Stream<List<_i8.BluetoothService>> get servicesStream =>
      (super.noSuchMethod(
        Invocation.getter(#servicesStream),
        returnValue: _i9.Stream<List<_i8.BluetoothService>>.empty(),
      ) as _i9.Stream<List<_i8.BluetoothService>>);

  @override
  _i9.Stream<List<_i8.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i9.Stream<List<_i8.BluetoothService>>.empty(),
      ) as _i9.Stream<List<_i8.BluetoothService>>);

  @override
  void cancelWhenDisconnected(
    _i9.StreamSubscription<dynamic>? subscription, {
    bool? next = false,
    bool? delayed = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelWhenDisconnected,
          [subscription],
          {
            #next: next,
            #delayed: delayed,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> connect({
    Duration? timeout = const Duration(seconds: 35),
    int? mtu = 512,
    bool? autoConnect = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #timeout: timeout,
            #mtu: mtu,
            #autoConnect: autoConnect,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> disconnect({
    int? timeout = 35,
    bool? queue = true,
    int? androidDelay = 2000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {
            #timeout: timeout,
            #queue: queue,
            #androidDelay: androidDelay,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i8.BluetoothService>> discoverServices({
    bool? subscribeToServicesChanged = true,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
          {
            #subscribeToServicesChanged: subscribeToServicesChanged,
            #timeout: timeout,
          },
        ),
        returnValue: _i9.Future<List<_i8.BluetoothService>>.value(
            <_i8.BluetoothService>[]),
      ) as _i9.Future<List<_i8.BluetoothService>>);

  @override
  _i9.Future<int> readRssi({int? timeout = 15}) => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> requestMtu(
    int? desiredMtu, {
    double? predelay = 0.35,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
          {
            #predelay: predelay,
            #timeout: timeout,
          },
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<void> requestConnectionPriority(
          {required _i8.ConnectionPriority? connectionPriorityRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {#connectionPriorityRequest: connectionPriorityRequest},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setPreferredPhy({
    required int? txPhy,
    required int? rxPhy,
    required _i8.PhyCoding? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPhy,
          [],
          {
            #txPhy: txPhy,
            #rxPhy: rxPhy,
            #option: option,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> createBond({
    int? timeout = 90,
    _i10.Uint8List? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBond,
          [],
          {
            #timeout: timeout,
            #pin: pin,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeBond({int? timeout = 30}) => (super.noSuchMethod(
        Invocation.method(
          #removeBond,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [FTMSService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFTMSService extends _i1.Mock implements _i11.FTMSService {
  MockFTMSService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BluetoothDevice get ftmsDevice => (super.noSuchMethod(
        Invocation.getter(#ftmsDevice),
        returnValue: _FakeBluetoothDevice_1(
          this,
          Invocation.getter(#ftmsDevice),
        ),
      ) as _i3.BluetoothDevice);

  @override
  _i11.WriteMachineControlPointCharacteristic get writeCharacteristic =>
      (super.noSuchMethod(
        Invocation.getter(#writeCharacteristic),
        returnValue: (
          _i3.BluetoothDevice device,
          _i3.MachineControlPoint controlPoint,
        ) =>
            _i9.Future<void>.value(),
      ) as _i11.WriteMachineControlPointCharacteristic);

  @override
  _i9.Future<void> writeCommand(
    _i3.MachineControlPointOpcodeType? opcodeType, {
    int? resistanceLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeCommand,
          [opcodeType],
          {#resistanceLevel: resistanceLevel},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [TrainingDataRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrainingDataRecorder extends _i1.Mock
    implements _i12.TrainingDataRecorder {
  MockTrainingDataRecorder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isRecording => (super.noSuchMethod(
        Invocation.getter(#isRecording),
        returnValue: false,
      ) as bool);

  @override
  int get recordCount => (super.noSuchMethod(
        Invocation.getter(#recordCount),
        returnValue: 0,
      ) as int);

  @override
  String get sessionName => (super.noSuchMethod(
        Invocation.getter(#sessionName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#sessionName),
        ),
      ) as String);

  @override
  void startRecording() => super.noSuchMethod(
        Invocation.method(
          #startRecording,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopRecording() => super.noSuchMethod(
        Invocation.method(
          #stopRecording,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordDataPoint({
    required Map<String, _i13.LiveDataFieldValue>? ftmsParams,
    double? resistanceLevel,
    DateTime? timestamp,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #recordDataPoint,
          [],
          {
            #ftmsParams: ftmsParams,
            #resistanceLevel: resistanceLevel,
            #timestamp: timestamp,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<String?> generateFitFile() => (super.noSuchMethod(
        Invocation.method(
          #generateFitFile,
          [],
        ),
        returnValue: _i9.Future<String?>.value(),
      ) as _i9.Future<String?>);

  @override
  _i9.Future<String?> generateFitFileToDirectory(
          _i14.Directory? outputDirectory) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateFitFileToDirectory,
          [outputDirectory],
        ),
        returnValue: _i9.Future<String?>.value(),
      ) as _i9.Future<String?>);

  @override
  Map<String, dynamic> getStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getStatistics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [StravaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStravaService extends _i1.Mock implements _i15.StravaService {
  MockStravaService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.StravaTokenManager get tokenManager => (super.noSuchMethod(
        Invocation.getter(#tokenManager),
        returnValue: _FakeStravaTokenManager_2(
          this,
          Invocation.getter(#tokenManager),
        ),
      ) as _i4.StravaTokenManager);

  @override
  _i5.StravaOAuthHandler get oauthHandler => (super.noSuchMethod(
        Invocation.getter(#oauthHandler),
        returnValue: _FakeStravaOAuthHandler_3(
          this,
          Invocation.getter(#oauthHandler),
        ),
      ) as _i5.StravaOAuthHandler);

  @override
  _i6.StravaActivityUploader get activityUploader => (super.noSuchMethod(
        Invocation.getter(#activityUploader),
        returnValue: _FakeStravaActivityUploader_4(
          this,
          Invocation.getter(#activityUploader),
        ),
      ) as _i6.StravaActivityUploader);

  @override
  _i9.Future<bool> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> isAuthenticated() => (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<Map<String, dynamic>?> getAuthStatus() => (super.noSuchMethod(
        Invocation.method(
          #getAuthStatus,
          [],
        ),
        returnValue: _i9.Future<Map<String, dynamic>?>.value(),
      ) as _i9.Future<Map<String, dynamic>?>);

  @override
  _i9.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<Map<String, dynamic>?> uploadActivity(
    String? fitFilePath,
    String? activityName, {
    String? activityType = 'workout',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadActivity,
          [
            fitFilePath,
            activityName,
          ],
          {#activityType: activityType},
        ),
        returnValue: _i9.Future<Map<String, dynamic>?>.value(),
      ) as _i9.Future<Map<String, dynamic>?>);

  @override
  _i9.Future<Map<String, dynamic>?> uploadActivityWithMetadata({
    required String? fitFilePath,
    required String? name,
    String? description,
    String? activityType = 'workout',
    bool? isPrivate = false,
    bool? hasHeartrate = false,
    bool? hasPower = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadActivityWithMetadata,
          [],
          {
            #fitFilePath: fitFilePath,
            #name: name,
            #description: description,
            #activityType: activityType,
            #isPrivate: isPrivate,
            #hasHeartrate: hasHeartrate,
            #hasPower: hasPower,
          },
        ),
        returnValue: _i9.Future<Map<String, dynamic>?>.value(),
      ) as _i9.Future<Map<String, dynamic>?>);
}
