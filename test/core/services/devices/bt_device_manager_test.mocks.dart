// Mocks generated by Mockito 5.4.6 from annotations
// in ftms/test/core/services/devices/bt_device_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i11;

import 'package:flutter/material.dart' as _i8;
import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i2;
import 'package:ftms/core/models/device_types.dart' as _i10;
import 'package:ftms/core/services/devices/bt_device.dart' as _i6;
import 'package:ftms/core/services/devices/bt_device_manager.dart' as _i9;
import 'package:ftms/core/services/devices/flutter_blue_plus_facade.dart'
    as _i3;
import 'package:ftms/core/services/devices/ftms_facade.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceIdentifier_0 extends _i1.SmartFake
    implements _i2.DeviceIdentifier {
  _FakeDeviceIdentifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGuid_1 extends _i1.SmartFake implements _i2.Guid {
  _FakeGuid_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterBluePlusFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBluePlusFacade extends _i1.Mock
    implements _i3.FlutterBluePlusFacade {
  @override
  _i4.Stream<_i2.BluetoothAdapterState> get adapterState => (super.noSuchMethod(
        Invocation.getter(#adapterState),
        returnValue: _i4.Stream<_i2.BluetoothAdapterState>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.BluetoothAdapterState>.empty(),
      ) as _i4.Stream<_i2.BluetoothAdapterState>);

  @override
  List<_i2.BluetoothDevice> get connectedDevices => (super.noSuchMethod(
        Invocation.getter(#connectedDevices),
        returnValue: <_i2.BluetoothDevice>[],
        returnValueForMissingStub: <_i2.BluetoothDevice>[],
      ) as List<_i2.BluetoothDevice>);
}

/// A class which mocks [FtmsFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockFtmsFacade extends _i1.Mock implements _i5.FtmsFacade {
  @override
  _i4.Future<bool> isBluetoothDeviceFTMSDevice(_i2.BluetoothDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #isBluetoothDeviceFTMSDevice,
          [device],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [BTDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBTDevice extends _i1.Mock implements _i6.BTDevice {
  @override
  String get deviceTypeName => (super.noSuchMethod(
        Invocation.getter(#deviceTypeName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#deviceTypeName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#deviceTypeName),
        ),
      ) as String);

  @override
  int get listPriority => (super.noSuchMethod(
        Invocation.getter(#listPriority),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.BluetoothConnectionState get connectionState => (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i2.BluetoothConnectionState.disconnected,
        returnValueForMissingStub: _i2.BluetoothConnectionState.disconnected,
      ) as _i2.BluetoothConnectionState);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Widget? getDeviceIcon(_i8.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #getDeviceIcon,
          [context],
        ),
        returnValueForMissingStub: null,
      ) as _i8.Widget?);

  @override
  bool isDeviceOfThisType(
    _i2.BluetoothDevice? device,
    List<_i2.ScanResult>? scanResults,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isDeviceOfThisType,
          [
            device,
            scanResults,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<bool> connectToDevice(_i2.BluetoothDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectToDevice,
          [device],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> disconnectFromDevice(_i2.BluetoothDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnectFromDevice,
          [device],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> performConnection(_i2.BluetoothDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #performConnection,
          [device],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> performDisconnection(_i2.BluetoothDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #performDisconnection,
          [device],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setDeviceManager(_i9.SupportedBTDeviceManager? deviceManager) =>
      super.noSuchMethod(
        Invocation.method(
          #setDeviceManager,
          [deviceManager],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateDeviceType(_i10.DeviceType? deviceType) => super.noSuchMethod(
        Invocation.method(
          #updateDeviceType,
          [deviceType],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Widget? getDevicePage(_i2.BluetoothDevice? device) => (super.noSuchMethod(
        Invocation.method(
          #getDevicePage,
          [device],
        ),
        returnValueForMissingStub: null,
      ) as _i8.Widget?);

  @override
  List<_i8.Widget> getConnectedActions(
    _i2.BluetoothDevice? device,
    _i8.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConnectedActions,
          [
            device,
            context,
          ],
        ),
        returnValue: <_i8.Widget>[],
        returnValueForMissingStub: <_i8.Widget>[],
      ) as List<_i8.Widget>);
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i2.BluetoothDevice {
  @override
  _i2.DeviceIdentifier get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
        returnValueForMissingStub: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  String get advName => (super.noSuchMethod(
        Invocation.getter(#advName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
      ) as String);

  @override
  List<_i2.BluetoothService> get servicesList => (super.noSuchMethod(
        Invocation.getter(#servicesList),
        returnValue: <_i2.BluetoothService>[],
        returnValueForMissingStub: <_i2.BluetoothService>[],
      ) as List<_i2.BluetoothService>);

  @override
  bool get isAutoConnectEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoConnectEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<_i2.BluetoothConnectionState> get connectionState =>
      (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i4.Stream<_i2.BluetoothConnectionState>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.BluetoothConnectionState>.empty(),
      ) as _i4.Stream<_i2.BluetoothConnectionState>);

  @override
  int get mtuNow => (super.noSuchMethod(
        Invocation.getter(#mtuNow),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i4.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i4.Stream<int>.empty(),
        returnValueForMissingStub: _i4.Stream<int>.empty(),
      ) as _i4.Stream<int>);

  @override
  _i4.Stream<void> get onServicesReset => (super.noSuchMethod(
        Invocation.getter(#onServicesReset),
        returnValue: _i4.Stream<void>.empty(),
        returnValueForMissingStub: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i4.Stream<_i2.BluetoothBondState> get bondState => (super.noSuchMethod(
        Invocation.getter(#bondState),
        returnValue: _i4.Stream<_i2.BluetoothBondState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.BluetoothBondState>.empty(),
      ) as _i4.Stream<_i2.BluetoothBondState>);

  @override
  _i4.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i2.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i4.Stream<_i2.BluetoothConnectionState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.Stream<_i2.BluetoothConnectionState>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.BluetoothConnectionState>.empty(),
      ) as _i4.Stream<_i2.BluetoothConnectionState>);

  @override
  _i4.Stream<List<_i2.BluetoothService>> get servicesStream =>
      (super.noSuchMethod(
        Invocation.getter(#servicesStream),
        returnValue: _i4.Stream<List<_i2.BluetoothService>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i4.Stream<List<_i2.BluetoothService>>);

  @override
  _i4.Stream<List<_i2.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i4.Stream<List<_i2.BluetoothService>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i4.Stream<List<_i2.BluetoothService>>);

  @override
  void cancelWhenDisconnected(
    _i4.StreamSubscription<dynamic>? subscription, {
    bool? next = false,
    bool? delayed = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelWhenDisconnected,
          [subscription],
          {
            #next: next,
            #delayed: delayed,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> connect({
    Duration? timeout = const Duration(seconds: 35),
    int? mtu = 512,
    bool? autoConnect = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #timeout: timeout,
            #mtu: mtu,
            #autoConnect: autoConnect,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> disconnect({
    int? timeout = 35,
    bool? queue = true,
    int? androidDelay = 2000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {
            #timeout: timeout,
            #queue: queue,
            #androidDelay: androidDelay,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.BluetoothService>> discoverServices({
    bool? subscribeToServicesChanged = true,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
          {
            #subscribeToServicesChanged: subscribeToServicesChanged,
            #timeout: timeout,
          },
        ),
        returnValue: _i4.Future<List<_i2.BluetoothService>>.value(
            <_i2.BluetoothService>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.BluetoothService>>.value(
            <_i2.BluetoothService>[]),
      ) as _i4.Future<List<_i2.BluetoothService>>);

  @override
  _i4.Future<int> readRssi({int? timeout = 15}) => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> requestMtu(
    int? desiredMtu, {
    double? predelay = 0.35,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
          {
            #predelay: predelay,
            #timeout: timeout,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> requestConnectionPriority(
          {required _i2.ConnectionPriority? connectionPriorityRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {#connectionPriorityRequest: connectionPriorityRequest},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPreferredPhy({
    required int? txPhy,
    required int? rxPhy,
    required _i2.PhyCoding? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPhy,
          [],
          {
            #txPhy: txPhy,
            #rxPhy: rxPhy,
            #option: option,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> createBond({
    int? timeout = 90,
    _i11.Uint8List? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBond,
          [],
          {
            #timeout: timeout,
            #pin: pin,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeBond({int? timeout = 30}) => (super.noSuchMethod(
        Invocation.method(
          #removeBond,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [BluetoothService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothService extends _i1.Mock implements _i2.BluetoothService {
  @override
  _i2.DeviceIdentifier get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
        returnValueForMissingStub: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  _i2.Guid get serviceUuid => (super.noSuchMethod(
        Invocation.getter(#serviceUuid),
        returnValue: _FakeGuid_1(
          this,
          Invocation.getter(#serviceUuid),
        ),
        returnValueForMissingStub: _FakeGuid_1(
          this,
          Invocation.getter(#serviceUuid),
        ),
      ) as _i2.Guid);

  @override
  List<_i2.BluetoothCharacteristic> get characteristics => (super.noSuchMethod(
        Invocation.getter(#characteristics),
        returnValue: <_i2.BluetoothCharacteristic>[],
        returnValueForMissingStub: <_i2.BluetoothCharacteristic>[],
      ) as List<_i2.BluetoothCharacteristic>);

  @override
  _i2.Guid get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _FakeGuid_1(
          this,
          Invocation.getter(#uuid),
        ),
        returnValueForMissingStub: _FakeGuid_1(
          this,
          Invocation.getter(#uuid),
        ),
      ) as _i2.Guid);

  @override
  bool get isPrimary => (super.noSuchMethod(
        Invocation.getter(#isPrimary),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isSecondary => (super.noSuchMethod(
        Invocation.getter(#isSecondary),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i2.BluetoothService> get includedServices => (super.noSuchMethod(
        Invocation.getter(#includedServices),
        returnValue: <_i2.BluetoothService>[],
        returnValueForMissingStub: <_i2.BluetoothService>[],
      ) as List<_i2.BluetoothService>);

  @override
  _i2.DeviceIdentifier get deviceId => (super.noSuchMethod(
        Invocation.getter(#deviceId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#deviceId),
        ),
        returnValueForMissingStub: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#deviceId),
        ),
      ) as _i2.DeviceIdentifier);
}
